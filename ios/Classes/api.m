// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface TWCONConversationClientData ()
+ (TWCONConversationClientData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONPropertiesData ()
+ (TWCONPropertiesData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONConversationData ()
+ (TWCONConversationData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONAttributesData ()
+ (TWCONAttributesData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONTokenData ()
+ (TWCONTokenData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageMediaData ()
+ (TWCONMessageMediaData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageData ()
+ (TWCONMessageData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageOptionsData ()
+ (TWCONMessageOptionsData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONParticipantData ()
+ (TWCONParticipantData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONUserData ()
+ (TWCONUserData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageCount ()
+ (TWCONMessageCount *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONConversationUpdatedData ()
+ (TWCONConversationUpdatedData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONErrorInfoData ()
+ (TWCONErrorInfoData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation TWCONConversationClientData
+ (TWCONConversationClientData *)fromMap:(NSDictionary *)dict {
  TWCONConversationClientData *result = [[TWCONConversationClientData alloc] init];
  result.myIdentity = dict[@"myIdentity"];
  if ((NSNull *)result.myIdentity == [NSNull null]) {
    result.myIdentity = nil;
  }
  result.connectionState = dict[@"connectionState"];
  if ((NSNull *)result.connectionState == [NSNull null]) {
    result.connectionState = nil;
  }
  result.isReachabilityEnabled = dict[@"isReachabilityEnabled"];
  if ((NSNull *)result.isReachabilityEnabled == [NSNull null]) {
    result.isReachabilityEnabled = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.myIdentity ? self.myIdentity : [NSNull null]), @"myIdentity", (self.connectionState ? self.connectionState : [NSNull null]), @"connectionState", (self.isReachabilityEnabled ? self.isReachabilityEnabled : [NSNull null]), @"isReachabilityEnabled", nil];
}
@end

@implementation TWCONPropertiesData
+ (TWCONPropertiesData *)fromMap:(NSDictionary *)dict {
  TWCONPropertiesData *result = [[TWCONPropertiesData alloc] init];
  result.region = dict[@"region"];
  if ((NSNull *)result.region == [NSNull null]) {
    result.region = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.region ? self.region : [NSNull null]), @"region", nil];
}
@end

@implementation TWCONConversationData
+ (TWCONConversationData *)fromMap:(NSDictionary *)dict {
  TWCONConversationData *result = [[TWCONConversationData alloc] init];
  result.sid = dict[@"sid"];
  if ((NSNull *)result.sid == [NSNull null]) {
    result.sid = nil;
  }
  result.attributes = [TWCONAttributesData fromMap:dict[@"attributes"]];
  if ((NSNull *)result.attributes == [NSNull null]) {
    result.attributes = nil;
  }
  result.uniqueName = dict[@"uniqueName"];
  if ((NSNull *)result.uniqueName == [NSNull null]) {
    result.uniqueName = nil;
  }
  result.friendlyName = dict[@"friendlyName"];
  if ((NSNull *)result.friendlyName == [NSNull null]) {
    result.friendlyName = nil;
  }
  result.status = dict[@"status"];
  if ((NSNull *)result.status == [NSNull null]) {
    result.status = nil;
  }
  result.synchronizationStatus = dict[@"synchronizationStatus"];
  if ((NSNull *)result.synchronizationStatus == [NSNull null]) {
    result.synchronizationStatus = nil;
  }
  result.dateCreated = dict[@"dateCreated"];
  if ((NSNull *)result.dateCreated == [NSNull null]) {
    result.dateCreated = nil;
  }
  result.createdBy = dict[@"createdBy"];
  if ((NSNull *)result.createdBy == [NSNull null]) {
    result.createdBy = nil;
  }
  result.dateUpdated = dict[@"dateUpdated"];
  if ((NSNull *)result.dateUpdated == [NSNull null]) {
    result.dateUpdated = nil;
  }
  result.lastMessageDate = dict[@"lastMessageDate"];
  if ((NSNull *)result.lastMessageDate == [NSNull null]) {
    result.lastMessageDate = nil;
  }
  result.lastReadMessageIndex = dict[@"lastReadMessageIndex"];
  if ((NSNull *)result.lastReadMessageIndex == [NSNull null]) {
    result.lastReadMessageIndex = nil;
  }
  result.lastMessageIndex = dict[@"lastMessageIndex"];
  if ((NSNull *)result.lastMessageIndex == [NSNull null]) {
    result.lastMessageIndex = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.uniqueName ? self.uniqueName : [NSNull null]), @"uniqueName", (self.friendlyName ? self.friendlyName : [NSNull null]), @"friendlyName", (self.status ? self.status : [NSNull null]), @"status", (self.synchronizationStatus ? self.synchronizationStatus : [NSNull null]), @"synchronizationStatus", (self.dateCreated ? self.dateCreated : [NSNull null]), @"dateCreated", (self.createdBy ? self.createdBy : [NSNull null]), @"createdBy", (self.dateUpdated ? self.dateUpdated : [NSNull null]), @"dateUpdated", (self.lastMessageDate ? self.lastMessageDate : [NSNull null]), @"lastMessageDate", (self.lastReadMessageIndex ? self.lastReadMessageIndex : [NSNull null]), @"lastReadMessageIndex", (self.lastMessageIndex ? self.lastMessageIndex : [NSNull null]), @"lastMessageIndex", nil];
}
@end

@implementation TWCONAttributesData
+ (TWCONAttributesData *)fromMap:(NSDictionary *)dict {
  TWCONAttributesData *result = [[TWCONAttributesData alloc] init];
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.type ? self.type : [NSNull null]), @"type", (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation TWCONTokenData
+ (TWCONTokenData *)fromMap:(NSDictionary *)dict {
  TWCONTokenData *result = [[TWCONTokenData alloc] init];
  result.token = dict[@"token"];
  if ((NSNull *)result.token == [NSNull null]) {
    result.token = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.token ? self.token : [NSNull null]), @"token", nil];
}
@end

@implementation TWCONMessageMediaData
+ (TWCONMessageMediaData *)fromMap:(NSDictionary *)dict {
  TWCONMessageMediaData *result = [[TWCONMessageMediaData alloc] init];
  result.sid = dict[@"sid"];
  if ((NSNull *)result.sid == [NSNull null]) {
    result.sid = nil;
  }
  result.fileName = dict[@"fileName"];
  if ((NSNull *)result.fileName == [NSNull null]) {
    result.fileName = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.size = dict[@"size"];
  if ((NSNull *)result.size == [NSNull null]) {
    result.size = nil;
  }
  result.conversationSid = dict[@"conversationSid"];
  if ((NSNull *)result.conversationSid == [NSNull null]) {
    result.conversationSid = nil;
  }
  result.messageSid = dict[@"messageSid"];
  if ((NSNull *)result.messageSid == [NSNull null]) {
    result.messageSid = nil;
  }
  result.messageIndex = dict[@"messageIndex"];
  if ((NSNull *)result.messageIndex == [NSNull null]) {
    result.messageIndex = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.fileName ? self.fileName : [NSNull null]), @"fileName", (self.type ? self.type : [NSNull null]), @"type", (self.size ? self.size : [NSNull null]), @"size", (self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.messageSid ? self.messageSid : [NSNull null]), @"messageSid", (self.messageIndex ? self.messageIndex : [NSNull null]), @"messageIndex", nil];
}
@end

@implementation TWCONMessageData
+ (TWCONMessageData *)fromMap:(NSDictionary *)dict {
  TWCONMessageData *result = [[TWCONMessageData alloc] init];
  result.sid = dict[@"sid"];
  if ((NSNull *)result.sid == [NSNull null]) {
    result.sid = nil;
  }
  result.messageIndex = dict[@"messageIndex"];
  if ((NSNull *)result.messageIndex == [NSNull null]) {
    result.messageIndex = nil;
  }
  result.author = dict[@"author"];
  if ((NSNull *)result.author == [NSNull null]) {
    result.author = nil;
  }
  result.subject = dict[@"subject"];
  if ((NSNull *)result.subject == [NSNull null]) {
    result.subject = nil;
  }
  result.messageBody = dict[@"messageBody"];
  if ((NSNull *)result.messageBody == [NSNull null]) {
    result.messageBody = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.hasMedia = dict[@"hasMedia"];
  if ((NSNull *)result.hasMedia == [NSNull null]) {
    result.hasMedia = nil;
  }
  result.media = [TWCONMessageMediaData fromMap:dict[@"media"]];
  if ((NSNull *)result.media == [NSNull null]) {
    result.media = nil;
  }
  result.conversationSid = dict[@"conversationSid"];
  if ((NSNull *)result.conversationSid == [NSNull null]) {
    result.conversationSid = nil;
  }
  result.participantSid = dict[@"participantSid"];
  if ((NSNull *)result.participantSid == [NSNull null]) {
    result.participantSid = nil;
  }
  result.dateCreated = dict[@"dateCreated"];
  if ((NSNull *)result.dateCreated == [NSNull null]) {
    result.dateCreated = nil;
  }
  result.dateUpdated = dict[@"dateUpdated"];
  if ((NSNull *)result.dateUpdated == [NSNull null]) {
    result.dateUpdated = nil;
  }
  result.lastUpdatedBy = dict[@"lastUpdatedBy"];
  if ((NSNull *)result.lastUpdatedBy == [NSNull null]) {
    result.lastUpdatedBy = nil;
  }
  result.attributes = [TWCONAttributesData fromMap:dict[@"attributes"]];
  if ((NSNull *)result.attributes == [NSNull null]) {
    result.attributes = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.messageIndex ? self.messageIndex : [NSNull null]), @"messageIndex", (self.author ? self.author : [NSNull null]), @"author", (self.subject ? self.subject : [NSNull null]), @"subject", (self.messageBody ? self.messageBody : [NSNull null]), @"messageBody", (self.type ? self.type : [NSNull null]), @"type", (self.hasMedia ? self.hasMedia : [NSNull null]), @"hasMedia", (self.media ? [self.media toMap] : [NSNull null]), @"media", (self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.participantSid ? self.participantSid : [NSNull null]), @"participantSid", (self.dateCreated ? self.dateCreated : [NSNull null]), @"dateCreated", (self.dateUpdated ? self.dateUpdated : [NSNull null]), @"dateUpdated", (self.lastUpdatedBy ? self.lastUpdatedBy : [NSNull null]), @"lastUpdatedBy", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", nil];
}
@end

@implementation TWCONMessageOptionsData
+ (TWCONMessageOptionsData *)fromMap:(NSDictionary *)dict {
  TWCONMessageOptionsData *result = [[TWCONMessageOptionsData alloc] init];
  result.body = dict[@"body"];
  if ((NSNull *)result.body == [NSNull null]) {
    result.body = nil;
  }
  result.attributes = [TWCONAttributesData fromMap:dict[@"attributes"]];
  if ((NSNull *)result.attributes == [NSNull null]) {
    result.attributes = nil;
  }
  result.mimeType = dict[@"mimeType"];
  if ((NSNull *)result.mimeType == [NSNull null]) {
    result.mimeType = nil;
  }
  result.filename = dict[@"filename"];
  if ((NSNull *)result.filename == [NSNull null]) {
    result.filename = nil;
  }
  result.inputPath = dict[@"inputPath"];
  if ((NSNull *)result.inputPath == [NSNull null]) {
    result.inputPath = nil;
  }
  result.mediaProgressListenerId = dict[@"mediaProgressListenerId"];
  if ((NSNull *)result.mediaProgressListenerId == [NSNull null]) {
    result.mediaProgressListenerId = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.body ? self.body : [NSNull null]), @"body", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.mimeType ? self.mimeType : [NSNull null]), @"mimeType", (self.filename ? self.filename : [NSNull null]), @"filename", (self.inputPath ? self.inputPath : [NSNull null]), @"inputPath", (self.mediaProgressListenerId ? self.mediaProgressListenerId : [NSNull null]), @"mediaProgressListenerId", nil];
}
@end

@implementation TWCONParticipantData
+ (TWCONParticipantData *)fromMap:(NSDictionary *)dict {
  TWCONParticipantData *result = [[TWCONParticipantData alloc] init];
  result.sid = dict[@"sid"];
  if ((NSNull *)result.sid == [NSNull null]) {
    result.sid = nil;
  }
  result.conversationSid = dict[@"conversationSid"];
  if ((NSNull *)result.conversationSid == [NSNull null]) {
    result.conversationSid = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.attributes = [TWCONAttributesData fromMap:dict[@"attributes"]];
  if ((NSNull *)result.attributes == [NSNull null]) {
    result.attributes = nil;
  }
  result.dateCreated = dict[@"dateCreated"];
  if ((NSNull *)result.dateCreated == [NSNull null]) {
    result.dateCreated = nil;
  }
  result.dateUpdated = dict[@"dateUpdated"];
  if ((NSNull *)result.dateUpdated == [NSNull null]) {
    result.dateUpdated = nil;
  }
  result.identity = dict[@"identity"];
  if ((NSNull *)result.identity == [NSNull null]) {
    result.identity = nil;
  }
  result.lastReadMessageIndex = dict[@"lastReadMessageIndex"];
  if ((NSNull *)result.lastReadMessageIndex == [NSNull null]) {
    result.lastReadMessageIndex = nil;
  }
  result.lastReadTimestamp = dict[@"lastReadTimestamp"];
  if ((NSNull *)result.lastReadTimestamp == [NSNull null]) {
    result.lastReadTimestamp = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.type ? self.type : [NSNull null]), @"type", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.dateCreated ? self.dateCreated : [NSNull null]), @"dateCreated", (self.dateUpdated ? self.dateUpdated : [NSNull null]), @"dateUpdated", (self.identity ? self.identity : [NSNull null]), @"identity", (self.lastReadMessageIndex ? self.lastReadMessageIndex : [NSNull null]), @"lastReadMessageIndex", (self.lastReadTimestamp ? self.lastReadTimestamp : [NSNull null]), @"lastReadTimestamp", nil];
}
@end

@implementation TWCONUserData
+ (TWCONUserData *)fromMap:(NSDictionary *)dict {
  TWCONUserData *result = [[TWCONUserData alloc] init];
  result.identity = dict[@"identity"];
  if ((NSNull *)result.identity == [NSNull null]) {
    result.identity = nil;
  }
  result.attributes = [TWCONAttributesData fromMap:dict[@"attributes"]];
  if ((NSNull *)result.attributes == [NSNull null]) {
    result.attributes = nil;
  }
  result.friendlyName = dict[@"friendlyName"];
  if ((NSNull *)result.friendlyName == [NSNull null]) {
    result.friendlyName = nil;
  }
  result.isNotifiable = dict[@"isNotifiable"];
  if ((NSNull *)result.isNotifiable == [NSNull null]) {
    result.isNotifiable = nil;
  }
  result.isOnline = dict[@"isOnline"];
  if ((NSNull *)result.isOnline == [NSNull null]) {
    result.isOnline = nil;
  }
  result.isSubscribed = dict[@"isSubscribed"];
  if ((NSNull *)result.isSubscribed == [NSNull null]) {
    result.isSubscribed = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.identity ? self.identity : [NSNull null]), @"identity", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.friendlyName ? self.friendlyName : [NSNull null]), @"friendlyName", (self.isNotifiable ? self.isNotifiable : [NSNull null]), @"isNotifiable", (self.isOnline ? self.isOnline : [NSNull null]), @"isOnline", (self.isSubscribed ? self.isSubscribed : [NSNull null]), @"isSubscribed", nil];
}
@end

@implementation TWCONMessageCount
+ (TWCONMessageCount *)fromMap:(NSDictionary *)dict {
  TWCONMessageCount *result = [[TWCONMessageCount alloc] init];
  result.count = dict[@"count"];
  if ((NSNull *)result.count == [NSNull null]) {
    result.count = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.count ? self.count : [NSNull null]), @"count", nil];
}
@end

@implementation TWCONConversationUpdatedData
+ (TWCONConversationUpdatedData *)fromMap:(NSDictionary *)dict {
  TWCONConversationUpdatedData *result = [[TWCONConversationUpdatedData alloc] init];
  result.conversation = [TWCONConversationData fromMap:dict[@"conversation"]];
  if ((NSNull *)result.conversation == [NSNull null]) {
    result.conversation = nil;
  }
  result.reason = dict[@"reason"];
  if ((NSNull *)result.reason == [NSNull null]) {
    result.reason = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.conversation ? [self.conversation toMap] : [NSNull null]), @"conversation", (self.reason ? self.reason : [NSNull null]), @"reason", nil];
}
@end

@implementation TWCONErrorInfoData
+ (TWCONErrorInfoData *)fromMap:(NSDictionary *)dict {
  TWCONErrorInfoData *result = [[TWCONErrorInfoData alloc] init];
  result.code = dict[@"code"];
  if ((NSNull *)result.code == [NSNull null]) {
    result.code = nil;
  }
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  result.status = dict[@"status"];
  if ((NSNull *)result.status == [NSNull null]) {
    result.status = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.code ? self.code : [NSNull null]), @"code", (self.message ? self.message : [NSNull null]), @"message", (self.status ? self.status : [NSNull null]), @"status", nil];
}
@end

@interface TWCONPluginApiCodecReader : FlutterStandardReader
@end
@implementation TWCONPluginApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONConversationClientData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONPropertiesData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONPluginApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONPluginApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONConversationClientData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONPropertiesData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONPluginApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONPluginApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONPluginApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONPluginApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONPluginApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONPluginApiCodecReaderWriter *readerWriter = [[TWCONPluginApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void TWCONPluginApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONPluginApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PluginApi.debug"
        binaryMessenger:binaryMessenger
        codec:TWCONPluginApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(debugEnableNative:enableSdk:error:)], @"TWCONPluginApi api (%@) doesn't respond to @selector(debugEnableNative:enableSdk:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enableNative = args[0];
        NSNumber *arg_enableSdk = args[1];
        FlutterError *error;
        [api debugEnableNative:arg_enableNative enableSdk:arg_enableSdk error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PluginApi.create"
        binaryMessenger:binaryMessenger
        codec:TWCONPluginApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createJwtToken:properties:completion:)], @"TWCONPluginApi api (%@) doesn't respond to @selector(createJwtToken:properties:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_jwtToken = args[0];
        TWCONPropertiesData *arg_properties = args[1];
        [api createJwtToken:arg_jwtToken properties:arg_properties completion:^(TWCONConversationClientData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONConversationClientApiCodecReader : FlutterStandardReader
@end
@implementation TWCONConversationClientApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 130:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 131:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 132:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 133:     
      return [TWCONTokenData fromMap:[self readValue]];
    
    case 134:     
      return [TWCONTokenData fromMap:[self readValue]];
    
    case 135:     
      return [TWCONUserData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONConversationClientApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONConversationClientApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONTokenData class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONTokenData class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONConversationClientApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONConversationClientApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONConversationClientApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONConversationClientApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONConversationClientApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONConversationClientApiCodecReaderWriter *readerWriter = [[TWCONConversationClientApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void TWCONConversationClientApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONConversationClientApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.updateToken"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateTokenToken:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(updateTokenToken:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_token = args[0];
        [api updateTokenToken:arg_token completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.shutdown"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(shutdownWithError:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(shutdownWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api shutdownWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.createConversation"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createConversationFriendlyName:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(createConversationFriendlyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_friendlyName = args[0];
        [api createConversationFriendlyName:arg_friendlyName completion:^(TWCONConversationData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.getMyConversations"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMyConversationsWithCompletion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(getMyConversationsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getMyConversationsWithCompletion:^(NSArray<TWCONConversationData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.getConversation"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getConversationConversationSidOrUniqueName:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(getConversationConversationSidOrUniqueName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSidOrUniqueName = args[0];
        [api getConversationConversationSidOrUniqueName:arg_conversationSidOrUniqueName completion:^(TWCONConversationData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.getMyUser"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMyUserWithCompletion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(getMyUserWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getMyUserWithCompletion:^(TWCONUserData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.registerForNotification"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerForNotificationTokenData:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(registerForNotificationTokenData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TWCONTokenData *arg_tokenData = args[0];
        [api registerForNotificationTokenData:arg_tokenData completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.unregisterForNotification"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(unregisterForNotificationTokenData:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(unregisterForNotificationTokenData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TWCONTokenData *arg_tokenData = args[0];
        [api unregisterForNotificationTokenData:arg_tokenData completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONConversationApiCodecReader : FlutterStandardReader
@end
@implementation TWCONConversationApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONMessageCount fromMap:[self readValue]];
    
    case 130:     
      return [TWCONMessageCount fromMap:[self readValue]];
    
    case 131:     
      return [TWCONMessageCount fromMap:[self readValue]];
    
    case 132:     
      return [TWCONMessageCount fromMap:[self readValue]];
    
    case 133:     
      return [TWCONMessageCount fromMap:[self readValue]];
    
    case 134:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 135:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 136:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 137:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 138:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 139:     
      return [TWCONMessageMediaData fromMap:[self readValue]];
    
    case 140:     
      return [TWCONMessageOptionsData fromMap:[self readValue]];
    
    case 141:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 142:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 143:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONConversationApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONConversationApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageCount class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageCount class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageCount class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageCount class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageCount class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageMediaData class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageOptionsData class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONConversationApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONConversationApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONConversationApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONConversationApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONConversationApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONConversationApiCodecReaderWriter *readerWriter = [[TWCONConversationApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void TWCONConversationApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONConversationApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.join"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(joinConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(joinConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api joinConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.leave"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(leaveConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(leaveConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api leaveConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.destroy"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(destroyConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(destroyConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api destroyConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.typing"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(typingConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(typingConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api typingConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.sendMessage"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageConversationSid:options:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(sendMessageConversationSid:options:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        TWCONMessageOptionsData *arg_options = args[1];
        [api sendMessageConversationSid:arg_conversationSid options:arg_options completion:^(TWCONMessageData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.addParticipantByIdentity"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addParticipantByIdentityConversationSid:identity:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(addParticipantByIdentityConversationSid:identity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_identity = args[1];
        [api addParticipantByIdentityConversationSid:arg_conversationSid identity:arg_identity completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.removeParticipant"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeParticipantConversationSid:participantSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(removeParticipantConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api removeParticipantConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.removeParticipantByIdentity"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeParticipantByIdentityConversationSid:identity:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(removeParticipantByIdentityConversationSid:identity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_identity = args[1];
        [api removeParticipantByIdentityConversationSid:arg_conversationSid identity:arg_identity completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantByIdentity"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantByIdentityConversationSid:identity:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantByIdentityConversationSid:identity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_identity = args[1];
        [api getParticipantByIdentityConversationSid:arg_conversationSid identity:arg_identity completion:^(TWCONParticipantData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantBySid"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantBySidConversationSid:participantSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantBySidConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api getParticipantBySidConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(TWCONParticipantData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantsList"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantsListConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantsListConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getParticipantsListConversationSid:arg_conversationSid completion:^(NSArray<TWCONParticipantData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessagesCount"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesCountConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessagesCountConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getMessagesCountConversationSid:arg_conversationSid completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getUnreadMessagesCount"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUnreadMessagesCountConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getUnreadMessagesCountConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getUnreadMessagesCountConversationSid:arg_conversationSid completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.advanceLastReadMessageIndex"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(advanceLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(advanceLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_lastReadMessageIndex = args[1];
        [api advanceLastReadMessageIndexConversationSid:arg_conversationSid lastReadMessageIndex:arg_lastReadMessageIndex completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setLastReadMessageIndex"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_lastReadMessageIndex = args[1];
        [api setLastReadMessageIndexConversationSid:arg_conversationSid lastReadMessageIndex:arg_lastReadMessageIndex completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setAllMessagesRead"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAllMessagesReadConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setAllMessagesReadConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api setAllMessagesReadConversationSid:arg_conversationSid completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setAllMessagesUnread"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAllMessagesUnreadConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setAllMessagesUnreadConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api setAllMessagesUnreadConversationSid:arg_conversationSid completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantsCount"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantsCountConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantsCountConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getParticipantsCountConversationSid:arg_conversationSid completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessagesAfter"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesAfterConversationSid:index:count:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessagesAfterConversationSid:index:count:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_index = args[1];
        NSNumber *arg_count = args[2];
        [api getMessagesAfterConversationSid:arg_conversationSid index:arg_index count:arg_count completion:^(NSArray<TWCONMessageData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessagesBefore"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesBeforeConversationSid:index:count:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessagesBeforeConversationSid:index:count:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_index = args[1];
        NSNumber *arg_count = args[2];
        [api getMessagesBeforeConversationSid:arg_conversationSid index:arg_index count:arg_count completion:^(NSArray<TWCONMessageData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessageByIndex"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessageByIndexConversationSid:messageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessageByIndexConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getMessageByIndexConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(TWCONMessageData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getLastMessages"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLastMessagesConversationSid:count:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getLastMessagesConversationSid:count:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_count = args[1];
        [api getLastMessagesConversationSid:arg_conversationSid count:arg_count completion:^(NSArray<TWCONMessageData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.removeMessage"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeMessageConversationSid:messageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(removeMessageConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api removeMessageConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesConversationSid:attributes:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setAttributesConversationSid:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        TWCONAttributesData *arg_attributes = args[1];
        [api setAttributesConversationSid:arg_conversationSid attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setFriendlyName"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFriendlyNameConversationSid:friendlyName:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setFriendlyNameConversationSid:friendlyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_friendlyName = args[1];
        [api setFriendlyNameConversationSid:arg_conversationSid friendlyName:arg_friendlyName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setNotificationLevel"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNotificationLevelConversationSid:notificationLevel:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setNotificationLevelConversationSid:notificationLevel:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_notificationLevel = args[1];
        [api setNotificationLevelConversationSid:arg_conversationSid notificationLevel:arg_notificationLevel completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setUniqueName"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUniqueNameConversationSid:uniqueName:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setUniqueNameConversationSid:uniqueName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_uniqueName = args[1];
        [api setUniqueNameConversationSid:arg_conversationSid uniqueName:arg_uniqueName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONParticipantApiCodecReader : FlutterStandardReader
@end
@implementation TWCONParticipantApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONUserData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONParticipantApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONParticipantApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONParticipantApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONParticipantApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONParticipantApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONParticipantApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONParticipantApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONParticipantApiCodecReaderWriter *readerWriter = [[TWCONParticipantApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void TWCONParticipantApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONParticipantApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ParticipantApi.getUser"
        binaryMessenger:binaryMessenger
        codec:TWCONParticipantApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserConversationSid:participantSid:completion:)], @"TWCONParticipantApi api (%@) doesn't respond to @selector(getUserConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api getUserConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(TWCONUserData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ParticipantApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONParticipantApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesConversationSid:participantSid:attributes:completion:)], @"TWCONParticipantApi api (%@) doesn't respond to @selector(setAttributesConversationSid:participantSid:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        TWCONAttributesData *arg_attributes = args[2];
        [api setAttributesConversationSid:arg_conversationSid participantSid:arg_participantSid attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ParticipantApi.remove"
        binaryMessenger:binaryMessenger
        codec:TWCONParticipantApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeConversationSid:participantSid:completion:)], @"TWCONParticipantApi api (%@) doesn't respond to @selector(removeConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api removeConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONMessageApiCodecReader : FlutterStandardReader
@end
@implementation TWCONMessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONMessageApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONMessageApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONMessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONMessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONMessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONMessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONMessageApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONMessageApiCodecReaderWriter *readerWriter = [[TWCONMessageApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void TWCONMessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONMessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.getMediaContentTemporaryUrl"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMediaContentTemporaryUrlConversationSid:messageIndex:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(getMediaContentTemporaryUrlConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getMediaContentTemporaryUrlConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.getParticipant"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantConversationSid:messageIndex:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(getParticipantConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getParticipantConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(TWCONParticipantData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesConversationSid:messageIndex:attributes:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(setAttributesConversationSid:messageIndex:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        TWCONAttributesData *arg_attributes = args[2];
        [api setAttributesConversationSid:arg_conversationSid messageIndex:arg_messageIndex attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.updateMessageBody"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateMessageBodyConversationSid:messageIndex:messageBody:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(updateMessageBodyConversationSid:messageIndex:messageBody:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        NSString *arg_messageBody = args[2];
        [api updateMessageBodyConversationSid:arg_conversationSid messageIndex:arg_messageIndex messageBody:arg_messageBody completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONUserApiCodecReader : FlutterStandardReader
@end
@implementation TWCONUserApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONUserApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONUserApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONUserApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONUserApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONUserApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONUserApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONUserApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONUserApiCodecReaderWriter *readerWriter = [[TWCONUserApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void TWCONUserApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONUserApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserApi.setFriendlyName"
        binaryMessenger:binaryMessenger
        codec:TWCONUserApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFriendlyNameIdentity:friendlyName:completion:)], @"TWCONUserApi api (%@) doesn't respond to @selector(setFriendlyNameIdentity:friendlyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_identity = args[0];
        NSString *arg_friendlyName = args[1];
        [api setFriendlyNameIdentity:arg_identity friendlyName:arg_friendlyName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONUserApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesIdentity:attributes:completion:)], @"TWCONUserApi api (%@) doesn't respond to @selector(setAttributesIdentity:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_identity = args[0];
        TWCONAttributesData *arg_attributes = args[1];
        [api setAttributesIdentity:arg_identity attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONFlutterConversationClientApiCodecReader : FlutterStandardReader
@end
@implementation TWCONFlutterConversationClientApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 130:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 131:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 132:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 133:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 134:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 135:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 136:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 137:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 138:     
      return [TWCONConversationUpdatedData fromMap:[self readValue]];
    
    case 139:     
      return [TWCONErrorInfoData fromMap:[self readValue]];
    
    case 140:     
      return [TWCONErrorInfoData fromMap:[self readValue]];
    
    case 141:     
      return [TWCONErrorInfoData fromMap:[self readValue]];
    
    case 142:     
      return [TWCONErrorInfoData fromMap:[self readValue]];
    
    case 143:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 144:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 145:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 146:     
      return [TWCONMessageMediaData fromMap:[self readValue]];
    
    case 147:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 148:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 149:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 150:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 151:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 152:     
      return [TWCONUserData fromMap:[self readValue]];
    
    case 153:     
      return [TWCONUserData fromMap:[self readValue]];
    
    case 154:     
      return [TWCONUserData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONFlutterConversationClientApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONFlutterConversationClientApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationUpdatedData class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONErrorInfoData class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONErrorInfoData class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONErrorInfoData class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONErrorInfoData class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageMediaData class]]) {
    [self writeByte:146];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:147];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:148];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:149];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:150];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:151];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:152];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:153];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:154];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONFlutterConversationClientApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONFlutterConversationClientApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONFlutterConversationClientApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONFlutterConversationClientApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONFlutterConversationClientApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONFlutterConversationClientApiCodecReaderWriter *readerWriter = [[TWCONFlutterConversationClientApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface TWCONFlutterConversationClientApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation TWCONFlutterConversationClientApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)errorErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.error"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationAddedConversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationAdded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationUpdatedEvent:(TWCONConversationUpdatedData *)arg_event completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_event] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationDeletedConversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationDeleted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)clientSynchronizationSynchronizationStatus:(NSString *)arg_synchronizationStatus completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.clientSynchronization"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_synchronizationStatus] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationSynchronizationChangeConversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationSynchronizationChange"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)connectionStateChangeConnectionState:(NSString *)arg_connectionState completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.connectionStateChange"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_connectionState] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)tokenAboutToExpireWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.tokenAboutToExpire"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)tokenExpiredWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.tokenExpired"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)userSubscribedUserData:(TWCONUserData *)arg_userData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.userSubscribed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_userData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)userUnsubscribedUserData:(TWCONUserData *)arg_userData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.userUnsubscribed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_userData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)userUpdatedUserData:(TWCONUserData *)arg_userData reason:(NSString *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.userUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_userData, arg_reason] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)addedToConversationNotificationConversationSid:(NSString *)arg_conversationSid completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.addedToConversationNotification"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)newMessageNotificationConversationSid:(NSString *)arg_conversationSid messageIndex:(NSNumber *)arg_messageIndex completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.newMessageNotification"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageIndex] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)notificationSubscribedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.notificationSubscribed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)notificationFailedErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.notificationFailed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)removedFromConversationNotificationConversationSid:(NSString *)arg_conversationSid completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.removedFromConversationNotification"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)registeredWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.registered"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)registrationFailedErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.registrationFailed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)deregisteredWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.deregistered"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)deregistrationFailedErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.deregistrationFailed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)messageAddedConversationSid:(NSString *)arg_conversationSid messageData:(TWCONMessageData *)arg_messageData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.messageAdded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)messageUpdatedConversationSid:(NSString *)arg_conversationSid messageData:(TWCONMessageData *)arg_messageData reason:(NSString *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.messageUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageData, arg_reason] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)messageDeletedConversationSid:(NSString *)arg_conversationSid messageData:(TWCONMessageData *)arg_messageData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.messageDeleted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)participantAddedConversationSid:(NSString *)arg_conversationSid participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.participantAdded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)participantUpdatedConversationSid:(NSString *)arg_conversationSid participantData:(TWCONParticipantData *)arg_participantData reason:(NSString *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.participantUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_participantData, arg_reason] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)participantDeletedConversationSid:(NSString *)arg_conversationSid participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.participantDeleted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)typingStartedConversationSid:(NSString *)arg_conversationSid conversationData:(TWCONConversationData *)arg_conversationData participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.typingStarted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_conversationData, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)typingEndedConversationSid:(NSString *)arg_conversationSid conversationData:(TWCONConversationData *)arg_conversationData participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.typingEnded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_conversationData, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)synchronizationChangedConversationSid:(NSString *)arg_conversationSid conversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.synchronizationChanged"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface TWCONFlutterLoggingApiCodecReader : FlutterStandardReader
@end
@implementation TWCONFlutterLoggingApiCodecReader
@end

@interface TWCONFlutterLoggingApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONFlutterLoggingApiCodecWriter
@end

@interface TWCONFlutterLoggingApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONFlutterLoggingApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONFlutterLoggingApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONFlutterLoggingApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONFlutterLoggingApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    TWCONFlutterLoggingApiCodecReaderWriter *readerWriter = [[TWCONFlutterLoggingApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface TWCONFlutterLoggingApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation TWCONFlutterLoggingApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)logFromHostMsg:(NSString *)arg_msg completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterLoggingApi.logFromHost"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterLoggingApiGetCodec()];
  [channel sendMessage:@[arg_msg] reply:^(id reply) {
    completion(nil);
  }];
}
@end
