// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.linq.twilio.conversations.twilio_conversations;

import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConversationClientData {
    private String myIdentity;
    public String getMyIdentity() { return myIdentity; }
    public void setMyIdentity(String setterArg) { this.myIdentity = setterArg; }

    private String connectionState;
    public String getConnectionState() { return connectionState; }
    public void setConnectionState(String setterArg) { this.connectionState = setterArg; }

    private Boolean isReachabilityEnabled;
    public Boolean getIsReachabilityEnabled() { return isReachabilityEnabled; }
    public void setIsReachabilityEnabled(Boolean setterArg) { this.isReachabilityEnabled = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("myIdentity", myIdentity);
      toMapResult.put("connectionState", connectionState);
      toMapResult.put("isReachabilityEnabled", isReachabilityEnabled);
      return toMapResult;
    }
    static ConversationClientData fromMap(Map<String, Object> map) {
      ConversationClientData fromMapResult = new ConversationClientData();
      Object myIdentity = map.get("myIdentity");
      fromMapResult.myIdentity = (String)myIdentity;
      Object connectionState = map.get("connectionState");
      fromMapResult.connectionState = (String)connectionState;
      Object isReachabilityEnabled = map.get("isReachabilityEnabled");
      fromMapResult.isReachabilityEnabled = (Boolean)isReachabilityEnabled;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PropertiesData {
    private String region;
    public String getRegion() { return region; }
    public void setRegion(String setterArg) { this.region = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("region", region);
      return toMapResult;
    }
    static PropertiesData fromMap(Map<String, Object> map) {
      PropertiesData fromMapResult = new PropertiesData();
      Object region = map.get("region");
      fromMapResult.region = (String)region;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConversationData {
    private String sid;
    public String getSid() { return sid; }
    public void setSid(String setterArg) { this.sid = setterArg; }

    private AttributesData attributes;
    public AttributesData getAttributes() { return attributes; }
    public void setAttributes(AttributesData setterArg) { this.attributes = setterArg; }

    private String uniqueName;
    public String getUniqueName() { return uniqueName; }
    public void setUniqueName(String setterArg) { this.uniqueName = setterArg; }

    private String friendlyName;
    public String getFriendlyName() { return friendlyName; }
    public void setFriendlyName(String setterArg) { this.friendlyName = setterArg; }

    private String status;
    public String getStatus() { return status; }
    public void setStatus(String setterArg) { this.status = setterArg; }

    private String synchronizationStatus;
    public String getSynchronizationStatus() { return synchronizationStatus; }
    public void setSynchronizationStatus(String setterArg) { this.synchronizationStatus = setterArg; }

    private String dateCreated;
    public String getDateCreated() { return dateCreated; }
    public void setDateCreated(String setterArg) { this.dateCreated = setterArg; }

    private String createdBy;
    public String getCreatedBy() { return createdBy; }
    public void setCreatedBy(String setterArg) { this.createdBy = setterArg; }

    private String dateUpdated;
    public String getDateUpdated() { return dateUpdated; }
    public void setDateUpdated(String setterArg) { this.dateUpdated = setterArg; }

    private String lastMessageDate;
    public String getLastMessageDate() { return lastMessageDate; }
    public void setLastMessageDate(String setterArg) { this.lastMessageDate = setterArg; }

    private Long lastReadMessageIndex;
    public Long getLastReadMessageIndex() { return lastReadMessageIndex; }
    public void setLastReadMessageIndex(Long setterArg) { this.lastReadMessageIndex = setterArg; }

    private Long lastMessageIndex;
    public Long getLastMessageIndex() { return lastMessageIndex; }
    public void setLastMessageIndex(Long setterArg) { this.lastMessageIndex = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("uniqueName", uniqueName);
      toMapResult.put("friendlyName", friendlyName);
      toMapResult.put("status", status);
      toMapResult.put("synchronizationStatus", synchronizationStatus);
      toMapResult.put("dateCreated", dateCreated);
      toMapResult.put("createdBy", createdBy);
      toMapResult.put("dateUpdated", dateUpdated);
      toMapResult.put("lastMessageDate", lastMessageDate);
      toMapResult.put("lastReadMessageIndex", lastReadMessageIndex);
      toMapResult.put("lastMessageIndex", lastMessageIndex);
      return toMapResult;
    }
    static ConversationData fromMap(Map<String, Object> map) {
      ConversationData fromMapResult = new ConversationData();
      Object sid = map.get("sid");
      fromMapResult.sid = (String)sid;
      Object attributes = map.get("attributes");
      fromMapResult.attributes = AttributesData.fromMap((Map)attributes);
      Object uniqueName = map.get("uniqueName");
      fromMapResult.uniqueName = (String)uniqueName;
      Object friendlyName = map.get("friendlyName");
      fromMapResult.friendlyName = (String)friendlyName;
      Object status = map.get("status");
      fromMapResult.status = (String)status;
      Object synchronizationStatus = map.get("synchronizationStatus");
      fromMapResult.synchronizationStatus = (String)synchronizationStatus;
      Object dateCreated = map.get("dateCreated");
      fromMapResult.dateCreated = (String)dateCreated;
      Object createdBy = map.get("createdBy");
      fromMapResult.createdBy = (String)createdBy;
      Object dateUpdated = map.get("dateUpdated");
      fromMapResult.dateUpdated = (String)dateUpdated;
      Object lastMessageDate = map.get("lastMessageDate");
      fromMapResult.lastMessageDate = (String)lastMessageDate;
      Object lastReadMessageIndex = map.get("lastReadMessageIndex");
      fromMapResult.lastReadMessageIndex = (lastReadMessageIndex == null) ? null : ((lastReadMessageIndex instanceof Integer) ? (Integer)lastReadMessageIndex : (Long)lastReadMessageIndex);
      Object lastMessageIndex = map.get("lastMessageIndex");
      fromMapResult.lastMessageIndex = (lastMessageIndex == null) ? null : ((lastMessageIndex instanceof Integer) ? (Integer)lastMessageIndex : (Long)lastMessageIndex);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AttributesData {
    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    private String data;
    public String getData() { return data; }
    public void setData(String setterArg) { this.data = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type);
      toMapResult.put("data", data);
      return toMapResult;
    }
    static AttributesData fromMap(Map<String, Object> map) {
      AttributesData fromMapResult = new AttributesData();
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      Object data = map.get("data");
      fromMapResult.data = (String)data;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TokenData {
    private String token;
    public String getToken() { return token; }
    public void setToken(String setterArg) { this.token = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("token", token);
      return toMapResult;
    }
    static TokenData fromMap(Map<String, Object> map) {
      TokenData fromMapResult = new TokenData();
      Object token = map.get("token");
      fromMapResult.token = (String)token;
      return fromMapResult;
    }
  }



  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageMediaData {
    private String sid;
    public String getSid() { return sid; }
    public void setSid(String setterArg) { this.sid = setterArg; }

    private String fileName;
    public String getFileName() { return fileName; }
    public void setFileName(String setterArg) { this.fileName = setterArg; }

    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    private Long size;
    public Long getSize() { return size; }
    public void setSize(Long setterArg) { this.size = setterArg; }

    private String conversationSid;
    public String getConversationSid() { return conversationSid; }
    public void setConversationSid(String setterArg) { this.conversationSid = setterArg; }

    private String messageSid;
    public String getMessageSid() { return messageSid; }
    public void setMessageSid(String setterArg) { this.messageSid = setterArg; }

    private Long messageIndex;
    public Long getMessageIndex() { return messageIndex; }
    public void setMessageIndex(Long setterArg) { this.messageIndex = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("fileName", fileName);
      toMapResult.put("type", type);
      toMapResult.put("size", size);
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("messageSid", messageSid);
      toMapResult.put("messageIndex", messageIndex);
      return toMapResult;
    }
    static MessageMediaData fromMap(Map<String, Object> map) {
      MessageMediaData fromMapResult = new MessageMediaData();
      Object sid = map.get("sid");
      fromMapResult.sid = (String)sid;
      Object fileName = map.get("fileName");
      fromMapResult.fileName = (String)fileName;
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      Object size = map.get("size");
      fromMapResult.size = (size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size);
      Object conversationSid = map.get("conversationSid");
      fromMapResult.conversationSid = (String)conversationSid;
      Object messageSid = map.get("messageSid");
      fromMapResult.messageSid = (String)messageSid;
      Object messageIndex = map.get("messageIndex");
      fromMapResult.messageIndex = (messageIndex == null) ? null : ((messageIndex instanceof Integer) ? (Integer)messageIndex : (Long)messageIndex);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageData {
    private String sid;
    public String getSid() { return sid; }
    public void setSid(String setterArg) { this.sid = setterArg; }

    private Long messageIndex;
    public Long getMessageIndex() { return messageIndex; }
    public void setMessageIndex(Long setterArg) { this.messageIndex = setterArg; }

    private String author;
    public String getAuthor() { return author; }
    public void setAuthor(String setterArg) { this.author = setterArg; }

    private String subject;
    public String getSubject() { return subject; }
    public void setSubject(String setterArg) { this.subject = setterArg; }

    private String messageBody;
    public String getMessageBody() { return messageBody; }
    public void setMessageBody(String setterArg) { this.messageBody = setterArg; }

    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    private Boolean hasMedia;
    public Boolean getHasMedia() { return hasMedia; }
    public void setHasMedia(Boolean setterArg) { this.hasMedia = setterArg; }

    private MessageMediaData media;
    public MessageMediaData getMedia() { return media; }
    public void setMedia(MessageMediaData setterArg) { this.media = setterArg; }

    private String conversationSid;
    public String getConversationSid() { return conversationSid; }
    public void setConversationSid(String setterArg) { this.conversationSid = setterArg; }

    private String participantSid;
    public String getParticipantSid() { return participantSid; }
    public void setParticipantSid(String setterArg) { this.participantSid = setterArg; }

    private String dateCreated;
    public String getDateCreated() { return dateCreated; }
    public void setDateCreated(String setterArg) { this.dateCreated = setterArg; }

    private String dateUpdated;
    public String getDateUpdated() { return dateUpdated; }
    public void setDateUpdated(String setterArg) { this.dateUpdated = setterArg; }

    private String lastUpdatedBy;
    public String getLastUpdatedBy() { return lastUpdatedBy; }
    public void setLastUpdatedBy(String setterArg) { this.lastUpdatedBy = setterArg; }

    private AttributesData attributes;
    public AttributesData getAttributes() { return attributes; }
    public void setAttributes(AttributesData setterArg) { this.attributes = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("messageIndex", messageIndex);
      toMapResult.put("author", author);
      toMapResult.put("subject", subject);
      toMapResult.put("messageBody", messageBody);
      toMapResult.put("type", type);
      toMapResult.put("hasMedia", hasMedia);
      toMapResult.put("media", (media == null) ? null : media.toMap());
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("participantSid", participantSid);
      toMapResult.put("dateCreated", dateCreated);
      toMapResult.put("dateUpdated", dateUpdated);
      toMapResult.put("lastUpdatedBy", lastUpdatedBy);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      return toMapResult;
    }
    static MessageData fromMap(Map<String, Object> map) {
      MessageData fromMapResult = new MessageData();
      Object sid = map.get("sid");
      fromMapResult.sid = (String)sid;
      Object messageIndex = map.get("messageIndex");
      fromMapResult.messageIndex = (messageIndex == null) ? null : ((messageIndex instanceof Integer) ? (Integer)messageIndex : (Long)messageIndex);
      Object author = map.get("author");
      fromMapResult.author = (String)author;
      Object subject = map.get("subject");
      fromMapResult.subject = (String)subject;
      Object messageBody = map.get("messageBody");
      fromMapResult.messageBody = (String)messageBody;
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      Object hasMedia = map.get("hasMedia");
      fromMapResult.hasMedia = (Boolean)hasMedia;
      Object media = map.get("media");
      fromMapResult.media = MessageMediaData.fromMap((Map)media);
      Object conversationSid = map.get("conversationSid");
      fromMapResult.conversationSid = (String)conversationSid;
      Object participantSid = map.get("participantSid");
      fromMapResult.participantSid = (String)participantSid;
      Object dateCreated = map.get("dateCreated");
      fromMapResult.dateCreated = (String)dateCreated;
      Object dateUpdated = map.get("dateUpdated");
      fromMapResult.dateUpdated = (String)dateUpdated;
      Object lastUpdatedBy = map.get("lastUpdatedBy");
      fromMapResult.lastUpdatedBy = (String)lastUpdatedBy;
      Object attributes = map.get("attributes");
      fromMapResult.attributes = AttributesData.fromMap((Map)attributes);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageOptionsData {
    private String body;
    public String getBody() { return body; }
    public void setBody(String setterArg) { this.body = setterArg; }

    private AttributesData attributes;
    public AttributesData getAttributes() { return attributes; }
    public void setAttributes(AttributesData setterArg) { this.attributes = setterArg; }

    private String mimeType;
    public String getMimeType() { return mimeType; }
    public void setMimeType(String setterArg) { this.mimeType = setterArg; }

    private String filename;
    public String getFilename() { return filename; }
    public void setFilename(String setterArg) { this.filename = setterArg; }

    private String inputPath;
    public String getInputPath() { return inputPath; }
    public void setInputPath(String setterArg) { this.inputPath = setterArg; }

    private Long mediaProgressListenerId;
    public Long getMediaProgressListenerId() { return mediaProgressListenerId; }
    public void setMediaProgressListenerId(Long setterArg) { this.mediaProgressListenerId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("body", body);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("mimeType", mimeType);
      toMapResult.put("filename", filename);
      toMapResult.put("inputPath", inputPath);
      toMapResult.put("mediaProgressListenerId", mediaProgressListenerId);
      return toMapResult;
    }
    static MessageOptionsData fromMap(Map<String, Object> map) {
      MessageOptionsData fromMapResult = new MessageOptionsData();
      Object body = map.get("body");
      fromMapResult.body = (String)body;
      Object attributes = map.get("attributes");
      fromMapResult.attributes = AttributesData.fromMap((Map)attributes);
      Object mimeType = map.get("mimeType");
      fromMapResult.mimeType = (String)mimeType;
      Object filename = map.get("filename");
      fromMapResult.filename = (String)filename;
      Object inputPath = map.get("inputPath");
      fromMapResult.inputPath = (String)inputPath;
      Object mediaProgressListenerId = map.get("mediaProgressListenerId");
      fromMapResult.mediaProgressListenerId = (mediaProgressListenerId == null) ? null : ((mediaProgressListenerId instanceof Integer) ? (Integer)mediaProgressListenerId : (Long)mediaProgressListenerId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ParticipantData {
    private String sid;
    public String getSid() { return sid; }
    public void setSid(String setterArg) { this.sid = setterArg; }

    private String conversationSid;
    public String getConversationSid() { return conversationSid; }
    public void setConversationSid(String setterArg) { this.conversationSid = setterArg; }

    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    private AttributesData attributes;
    public AttributesData getAttributes() { return attributes; }
    public void setAttributes(AttributesData setterArg) { this.attributes = setterArg; }

    private String dateCreated;
    public String getDateCreated() { return dateCreated; }
    public void setDateCreated(String setterArg) { this.dateCreated = setterArg; }

    private String dateUpdated;
    public String getDateUpdated() { return dateUpdated; }
    public void setDateUpdated(String setterArg) { this.dateUpdated = setterArg; }

    private String identity;
    public String getIdentity() { return identity; }
    public void setIdentity(String setterArg) { this.identity = setterArg; }

    private Long lastReadMessageIndex;
    public Long getLastReadMessageIndex() { return lastReadMessageIndex; }
    public void setLastReadMessageIndex(Long setterArg) { this.lastReadMessageIndex = setterArg; }

    private String lastReadTimestamp;
    public String getLastReadTimestamp() { return lastReadTimestamp; }
    public void setLastReadTimestamp(String setterArg) { this.lastReadTimestamp = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("type", type);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("dateCreated", dateCreated);
      toMapResult.put("dateUpdated", dateUpdated);
      toMapResult.put("identity", identity);
      toMapResult.put("lastReadMessageIndex", lastReadMessageIndex);
      toMapResult.put("lastReadTimestamp", lastReadTimestamp);
      return toMapResult;
    }
    static ParticipantData fromMap(Map<String, Object> map) {
      ParticipantData fromMapResult = new ParticipantData();
      Object sid = map.get("sid");
      fromMapResult.sid = (String)sid;
      Object conversationSid = map.get("conversationSid");
      fromMapResult.conversationSid = (String)conversationSid;
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      Object attributes = map.get("attributes");
      fromMapResult.attributes = AttributesData.fromMap((Map)attributes);
      Object dateCreated = map.get("dateCreated");
      fromMapResult.dateCreated = (String)dateCreated;
      Object dateUpdated = map.get("dateUpdated");
      fromMapResult.dateUpdated = (String)dateUpdated;
      Object identity = map.get("identity");
      fromMapResult.identity = (String)identity;
      Object lastReadMessageIndex = map.get("lastReadMessageIndex");
      fromMapResult.lastReadMessageIndex = (lastReadMessageIndex == null) ? null : ((lastReadMessageIndex instanceof Integer) ? (Integer)lastReadMessageIndex : (Long)lastReadMessageIndex);
      Object lastReadTimestamp = map.get("lastReadTimestamp");
      fromMapResult.lastReadTimestamp = (String)lastReadTimestamp;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserData {
    private String identity;
    public String getIdentity() { return identity; }
    public void setIdentity(String setterArg) { this.identity = setterArg; }

    private AttributesData attributes;
    public AttributesData getAttributes() { return attributes; }
    public void setAttributes(AttributesData setterArg) { this.attributes = setterArg; }

    private String friendlyName;
    public String getFriendlyName() { return friendlyName; }
    public void setFriendlyName(String setterArg) { this.friendlyName = setterArg; }

    private Boolean isNotifiable;
    public Boolean getIsNotifiable() { return isNotifiable; }
    public void setIsNotifiable(Boolean setterArg) { this.isNotifiable = setterArg; }

    private Boolean isOnline;
    public Boolean getIsOnline() { return isOnline; }
    public void setIsOnline(Boolean setterArg) { this.isOnline = setterArg; }

    private Boolean isSubscribed;
    public Boolean getIsSubscribed() { return isSubscribed; }
    public void setIsSubscribed(Boolean setterArg) { this.isSubscribed = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identity", identity);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("friendlyName", friendlyName);
      toMapResult.put("isNotifiable", isNotifiable);
      toMapResult.put("isOnline", isOnline);
      toMapResult.put("isSubscribed", isSubscribed);
      return toMapResult;
    }
    static UserData fromMap(Map<String, Object> map) {
      UserData fromMapResult = new UserData();
      Object identity = map.get("identity");
      fromMapResult.identity = (String)identity;
      Object attributes = map.get("attributes");
      fromMapResult.attributes = AttributesData.fromMap((Map)attributes);
      Object friendlyName = map.get("friendlyName");
      fromMapResult.friendlyName = (String)friendlyName;
      Object isNotifiable = map.get("isNotifiable");
      fromMapResult.isNotifiable = (Boolean)isNotifiable;
      Object isOnline = map.get("isOnline");
      fromMapResult.isOnline = (Boolean)isOnline;
      Object isSubscribed = map.get("isSubscribed");
      fromMapResult.isSubscribed = (Boolean)isSubscribed;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageCount {
    private Long count;
    public Long getCount() { return count; }
    public void setCount(Long setterArg) { this.count = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("count", count);
      return toMapResult;
    }
    static MessageCount fromMap(Map<String, Object> map) {
      MessageCount fromMapResult = new MessageCount();
      Object count = map.get("count");
      fromMapResult.count = (count == null) ? null : ((count instanceof Integer) ? (Integer)count : (Long)count);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConversationUpdatedData {
    private ConversationData conversation;
    public ConversationData getConversation() { return conversation; }
    public void setConversation(ConversationData setterArg) { this.conversation = setterArg; }

    private String reason;
    public String getReason() { return reason; }
    public void setReason(String setterArg) { this.reason = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("conversation", (conversation == null) ? null : conversation.toMap());
      toMapResult.put("reason", reason);
      return toMapResult;
    }
    static ConversationUpdatedData fromMap(Map<String, Object> map) {
      ConversationUpdatedData fromMapResult = new ConversationUpdatedData();
      Object conversation = map.get("conversation");
      fromMapResult.conversation = ConversationData.fromMap((Map)conversation);
      Object reason = map.get("reason");
      fromMapResult.reason = (String)reason;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ErrorInfoData {
    private Long code;
    public Long getCode() { return code; }
    public void setCode(Long setterArg) { this.code = setterArg; }

    private String message;
    public String getMessage() { return message; }
    public void setMessage(String setterArg) { this.message = setterArg; }

    private Long status;
    public Long getStatus() { return status; }
    public void setStatus(Long setterArg) { this.status = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("message", message);
      toMapResult.put("status", status);
      return toMapResult;
    }
    static ErrorInfoData fromMap(Map<String, Object> map) {
      ErrorInfoData fromMapResult = new ErrorInfoData();
      Object code = map.get("code");
      fromMapResult.code = (code == null) ? null : ((code instanceof Integer) ? (Integer)code : (Long)code);
      Object message = map.get("message");
      fromMapResult.message = (String)message;
      Object status = map.get("status");
      fromMapResult.status = (status == null) ? null : ((status instanceof Integer) ? (Integer)status : (Long)status);
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class PluginApiCodec extends StandardMessageCodec {
    public static final PluginApiCodec INSTANCE = new PluginApiCodec();
    private PluginApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConversationClientData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PropertiesData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConversationClientData) {
        stream.write(128);
        writeValue(stream, ((ConversationClientData) value).toMap());
      } else 
      if (value instanceof PropertiesData) {
        stream.write(129);
        writeValue(stream, ((PropertiesData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PluginApi {
    void debug(Boolean enableNative, Boolean enableSdk);
    void create(String jwtToken, PropertiesData properties, Result<ConversationClientData> result);

    /** The codec used by PluginApi. */
    static MessageCodec<Object> getCodec() {
      return PluginApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PluginApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PluginApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PluginApi.debug", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enableNativeArg = (Boolean)args.get(0);
              if (enableNativeArg == null) {
                throw new NullPointerException("enableNativeArg unexpectedly null.");
              }
              Boolean enableSdkArg = (Boolean)args.get(1);
              if (enableSdkArg == null) {
                throw new NullPointerException("enableSdkArg unexpectedly null.");
              }
              api.debug(enableNativeArg, enableSdkArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PluginApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String jwtTokenArg = (String)args.get(0);
              if (jwtTokenArg == null) {
                throw new NullPointerException("jwtTokenArg unexpectedly null.");
              }
              PropertiesData propertiesArg = (PropertiesData)args.get(1);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<ConversationClientData> resultCallback = new Result<ConversationClientData>() {
                public void success(ConversationClientData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(jwtTokenArg, propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ConversationClientApiCodec extends StandardMessageCodec {
    public static final ConversationClientApiCodec INSTANCE = new ConversationClientApiCodec();
    private ConversationClientApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return TokenData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return TokenData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof AttributesData) {
        stream.write(129);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(130);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(131);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(132);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof TokenData) {
        stream.write(133);
        writeValue(stream, ((TokenData) value).toMap());
      } else 
      if (value instanceof TokenData) {
        stream.write(134);
        writeValue(stream, ((TokenData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(135);
        writeValue(stream, ((UserData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConversationClientApi {
    void updateToken(String token, Result<Void> result);
    void shutdown();
    void createConversation(String friendlyName, Result<ConversationData> result);
    void getMyConversations(Result<List<ConversationData>> result);
    void getConversation(String conversationSidOrUniqueName, Result<ConversationData> result);
    void getMyUser(Result<UserData> result);
    void registerForNotification(TokenData tokenData, Result<Void> result);
    void unregisterForNotification(TokenData tokenData, Result<Void> result);

    /** The codec used by ConversationClientApi. */
    static MessageCodec<Object> getCodec() {
      return ConversationClientApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ConversationClientApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ConversationClientApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.updateToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String tokenArg = (String)args.get(0);
              if (tokenArg == null) {
                throw new NullPointerException("tokenArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.updateToken(tokenArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.shutdown", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.shutdown();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.createConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String friendlyNameArg = (String)args.get(0);
              if (friendlyNameArg == null) {
                throw new NullPointerException("friendlyNameArg unexpectedly null.");
              }
              Result<ConversationData> resultCallback = new Result<ConversationData>() {
                public void success(ConversationData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createConversation(friendlyNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.getMyConversations", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<ConversationData>> resultCallback = new Result<List<ConversationData>>() {
                public void success(List<ConversationData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMyConversations(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.getConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidOrUniqueNameArg = (String)args.get(0);
              if (conversationSidOrUniqueNameArg == null) {
                throw new NullPointerException("conversationSidOrUniqueNameArg unexpectedly null.");
              }
              Result<ConversationData> resultCallback = new Result<ConversationData>() {
                public void success(ConversationData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getConversation(conversationSidOrUniqueNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.getMyUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<UserData> resultCallback = new Result<UserData>() {
                public void success(UserData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMyUser(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.registerForNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TokenData tokenDataArg = (TokenData)args.get(0);
              if (tokenDataArg == null) {
                throw new NullPointerException("tokenDataArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.registerForNotification(tokenDataArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.unregisterForNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TokenData tokenDataArg = (TokenData)args.get(0);
              if (tokenDataArg == null) {
                throw new NullPointerException("tokenDataArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.unregisterForNotification(tokenDataArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ConversationApiCodec extends StandardMessageCodec {
    public static final ConversationApiCodec INSTANCE = new ConversationApiCodec();
    private ConversationApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return MessageCount.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return MessageCount.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return MessageCount.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MessageCount.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MessageCount.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return MessageMediaData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MessageOptionsData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof MessageCount) {
        stream.write(129);
        writeValue(stream, ((MessageCount) value).toMap());
      } else 
      if (value instanceof MessageCount) {
        stream.write(130);
        writeValue(stream, ((MessageCount) value).toMap());
      } else 
      if (value instanceof MessageCount) {
        stream.write(131);
        writeValue(stream, ((MessageCount) value).toMap());
      } else 
      if (value instanceof MessageCount) {
        stream.write(132);
        writeValue(stream, ((MessageCount) value).toMap());
      } else 
      if (value instanceof MessageCount) {
        stream.write(133);
        writeValue(stream, ((MessageCount) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(134);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(135);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(136);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(137);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(138);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageMediaData) {
        stream.write(139);
        writeValue(stream, ((MessageMediaData) value).toMap());
      } else 
      if (value instanceof MessageOptionsData) {
        stream.write(140);
        writeValue(stream, ((MessageOptionsData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(141);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(142);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(143);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConversationApi {
    void join(String conversationSid, Result<Void> result);
    void leave(String conversationSid, Result<Void> result);
    void destroy(String conversationSid, Result<Void> result);
    void typing(String conversationSid, Result<Void> result);
    void sendMessage(String conversationSid, MessageOptionsData options, Result<MessageData> result);
    void addParticipantByIdentity(String conversationSid, String identity, Result<Boolean> result);
    void removeParticipant(String conversationSid, String participantSid, Result<Boolean> result);
    void removeParticipantByIdentity(String conversationSid, String identity, Result<Boolean> result);
    void getParticipantByIdentity(String conversationSid, String identity, Result<ParticipantData> result);
    void getParticipantBySid(String conversationSid, String participantSid, Result<ParticipantData> result);
    void getParticipantsList(String conversationSid, Result<List<ParticipantData>> result);
    void getMessagesCount(String conversationSid, Result<MessageCount> result);
    void getUnreadMessagesCount(String conversationSid, Result<Long> result);
    void advanceLastReadMessageIndex(String conversationSid, Long lastReadMessageIndex, Result<MessageCount> result);
    void setLastReadMessageIndex(String conversationSid, Long lastReadMessageIndex, Result<MessageCount> result);
    void setAllMessagesRead(String conversationSid, Result<MessageCount> result);
    void setAllMessagesUnread(String conversationSid, Result<MessageCount> result);
    void getParticipantsCount(String conversationSid, Result<Long> result);
    void getMessagesAfter(String conversationSid, Long index, Long count, Result<List<MessageData>> result);
    void getMessagesBefore(String conversationSid, Long index, Long count, Result<List<MessageData>> result);
    void getMessageByIndex(String conversationSid, Long messageIndex, Result<MessageData> result);
    void getLastMessages(String conversationSid, Long count, Result<List<MessageData>> result);
    void removeMessage(String conversationSid, Long messageIndex, Result<Boolean> result);
    void setAttributes(String conversationSid, AttributesData attributes, Result<Void> result);
    void setFriendlyName(String conversationSid, String friendlyName, Result<Void> result);
    void setNotificationLevel(String conversationSid, String notificationLevel, Result<Void> result);
    void setUniqueName(String conversationSid, String uniqueName, Result<Void> result);

    /** The codec used by ConversationApi. */
    static MessageCodec<Object> getCodec() {
      return ConversationApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ConversationApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ConversationApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.join", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.join(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.leave", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.leave(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.destroy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.destroy(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.typing", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.typing(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              MessageOptionsData optionsArg = (MessageOptionsData)args.get(1);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<MessageData> resultCallback = new Result<MessageData>() {
                public void success(MessageData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.sendMessage(conversationSidArg, optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.addParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String identityArg = (String)args.get(1);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.removeParticipant", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeParticipant(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.removeParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String identityArg = (String)args.get(1);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String identityArg = (String)args.get(1);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              Result<ParticipantData> resultCallback = new Result<ParticipantData>() {
                public void success(ParticipantData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantBySid", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<ParticipantData> resultCallback = new Result<ParticipantData>() {
                public void success(ParticipantData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantBySid(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantsList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<List<ParticipantData>> resultCallback = new Result<List<ParticipantData>>() {
                public void success(List<ParticipantData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantsList(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessagesCount(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getUnreadMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getUnreadMessagesCount(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.advanceLastReadMessageIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number lastReadMessageIndexArg = (Number)args.get(1);
              if (lastReadMessageIndexArg == null) {
                throw new NullPointerException("lastReadMessageIndexArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.advanceLastReadMessageIndex(conversationSidArg, lastReadMessageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setLastReadMessageIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number lastReadMessageIndexArg = (Number)args.get(1);
              if (lastReadMessageIndexArg == null) {
                throw new NullPointerException("lastReadMessageIndexArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLastReadMessageIndex(conversationSidArg, lastReadMessageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setAllMessagesRead", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAllMessagesRead(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setAllMessagesUnread", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAllMessagesUnread(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantsCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantsCount(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessagesAfter", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number indexArg = (Number)args.get(1);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              Number countArg = (Number)args.get(2);
              if (countArg == null) {
                throw new NullPointerException("countArg unexpectedly null.");
              }
              Result<List<MessageData>> resultCallback = new Result<List<MessageData>>() {
                public void success(List<MessageData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessagesAfter(conversationSidArg, indexArg.longValue(), countArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessagesBefore", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number indexArg = (Number)args.get(1);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              Number countArg = (Number)args.get(2);
              if (countArg == null) {
                throw new NullPointerException("countArg unexpectedly null.");
              }
              Result<List<MessageData>> resultCallback = new Result<List<MessageData>>() {
                public void success(List<MessageData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessagesBefore(conversationSidArg, indexArg.longValue(), countArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessageByIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<MessageData> resultCallback = new Result<MessageData>() {
                public void success(MessageData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessageByIndex(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getLastMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number countArg = (Number)args.get(1);
              if (countArg == null) {
                throw new NullPointerException("countArg unexpectedly null.");
              }
              Result<List<MessageData>> resultCallback = new Result<List<MessageData>>() {
                public void success(List<MessageData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLastMessages(conversationSidArg, countArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.removeMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeMessage(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(1);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(conversationSidArg, attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setFriendlyName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String friendlyNameArg = (String)args.get(1);
              if (friendlyNameArg == null) {
                throw new NullPointerException("friendlyNameArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFriendlyName(conversationSidArg, friendlyNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setNotificationLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String notificationLevelArg = (String)args.get(1);
              if (notificationLevelArg == null) {
                throw new NullPointerException("notificationLevelArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setNotificationLevel(conversationSidArg, notificationLevelArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setUniqueName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String uniqueNameArg = (String)args.get(1);
              if (uniqueNameArg == null) {
                throw new NullPointerException("uniqueNameArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setUniqueName(conversationSidArg, uniqueNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ParticipantApiCodec extends StandardMessageCodec {
    public static final ParticipantApiCodec INSTANCE = new ParticipantApiCodec();
    private ParticipantApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(129);
        writeValue(stream, ((UserData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ParticipantApi {
    void getUser(String conversationSid, String participantSid, Result<UserData> result);
    void setAttributes(String conversationSid, String participantSid, AttributesData attributes, Result<Void> result);
    void remove(String conversationSid, String participantSid, Result<Void> result);

    /** The codec used by ParticipantApi. */
    static MessageCodec<Object> getCodec() {
      return ParticipantApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ParticipantApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ParticipantApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ParticipantApi.getUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<UserData> resultCallback = new Result<UserData>() {
                public void success(UserData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getUser(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ParticipantApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(2);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(conversationSidArg, participantSidArg, attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ParticipantApi.remove", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.remove(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class MessageApiCodec extends StandardMessageCodec {
    public static final MessageApiCodec INSTANCE = new MessageApiCodec();
    private MessageApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(129);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MessageApi {
    void getMediaContentTemporaryUrl(String conversationSid, Long messageIndex, Result<String> result);
    void getParticipant(String conversationSid, Long messageIndex, Result<ParticipantData> result);
    void setAttributes(String conversationSid, Long messageIndex, AttributesData attributes, Result<Void> result);
    void updateMessageBody(String conversationSid, Long messageIndex, String messageBody, Result<Void> result);

    /** The codec used by MessageApi. */
    static MessageCodec<Object> getCodec() {
      return MessageApiCodec.INSTANCE;
    }

    /** Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MessageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.getMediaContentTemporaryUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMediaContentTemporaryUrl(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.getParticipant", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<ParticipantData> resultCallback = new Result<ParticipantData>() {
                public void success(ParticipantData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipant(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(2);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(conversationSidArg, messageIndexArg.longValue(), attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.updateMessageBody", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              String messageBodyArg = (String)args.get(2);
              if (messageBodyArg == null) {
                throw new NullPointerException("messageBodyArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.updateMessageBody(conversationSidArg, messageIndexArg.longValue(), messageBodyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class UserApiCodec extends StandardMessageCodec {
    public static final UserApiCodec INSTANCE = new UserApiCodec();
    private UserApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface UserApi {
    void setFriendlyName(String identity, String friendlyName, Result<Void> result);
    void setAttributes(String identity, AttributesData attributes, Result<Void> result);

    /** The codec used by UserApi. */
    static MessageCodec<Object> getCodec() {
      return UserApiCodec.INSTANCE;
    }

    /** Sets up an instance of `UserApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, UserApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserApi.setFriendlyName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String identityArg = (String)args.get(0);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              String friendlyNameArg = (String)args.get(1);
              if (friendlyNameArg == null) {
                throw new NullPointerException("friendlyNameArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFriendlyName(identityArg, friendlyNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String identityArg = (String)args.get(0);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(1);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(identityArg, attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterConversationClientApiCodec extends StandardMessageCodec {
    public static final FlutterConversationClientApiCodec INSTANCE = new FlutterConversationClientApiCodec();
    private FlutterConversationClientApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ConversationUpdatedData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return ErrorInfoData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return ErrorInfoData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return ErrorInfoData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return ErrorInfoData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MessageMediaData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof AttributesData) {
        stream.write(129);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof AttributesData) {
        stream.write(130);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof AttributesData) {
        stream.write(131);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(132);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(133);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(134);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(135);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(136);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(137);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationUpdatedData) {
        stream.write(138);
        writeValue(stream, ((ConversationUpdatedData) value).toMap());
      } else 
      if (value instanceof ErrorInfoData) {
        stream.write(139);
        writeValue(stream, ((ErrorInfoData) value).toMap());
      } else 
      if (value instanceof ErrorInfoData) {
        stream.write(140);
        writeValue(stream, ((ErrorInfoData) value).toMap());
      } else 
      if (value instanceof ErrorInfoData) {
        stream.write(141);
        writeValue(stream, ((ErrorInfoData) value).toMap());
      } else 
      if (value instanceof ErrorInfoData) {
        stream.write(142);
        writeValue(stream, ((ErrorInfoData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(143);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(144);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(145);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageMediaData) {
        stream.write(146);
        writeValue(stream, ((MessageMediaData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(147);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(148);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(149);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(150);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(151);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(152);
        writeValue(stream, ((UserData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(153);
        writeValue(stream, ((UserData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(154);
        writeValue(stream, ((UserData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterConversationClientApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterConversationClientApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterConversationClientApiCodec.INSTANCE;
    }

    public void error(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.error", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationAdded(ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationAdded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationUpdated(ConversationUpdatedData eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(eventArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationDeleted(ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationDeleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void clientSynchronization(String synchronizationStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.clientSynchronization", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(synchronizationStatusArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationSynchronizationChange(ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationSynchronizationChange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void connectionStateChange(String connectionStateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.connectionStateChange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(connectionStateArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void tokenAboutToExpire(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.tokenAboutToExpire", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void tokenExpired(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.tokenExpired", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void userSubscribed(UserData userDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.userSubscribed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void userUnsubscribed(UserData userDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.userUnsubscribed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void userUpdated(UserData userDataArg, String reasonArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.userUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userDataArg, reasonArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void addedToConversationNotification(String conversationSidArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.addedToConversationNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void newMessageNotification(String conversationSidArg, Long messageIndexArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.newMessageNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageIndexArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void notificationSubscribed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.notificationSubscribed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void notificationFailed(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.notificationFailed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void removedFromConversationNotification(String conversationSidArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.removedFromConversationNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void registered(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.registered", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void registrationFailed(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.registrationFailed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void deregistered(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.deregistered", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void deregistrationFailed(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.deregistrationFailed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void messageAdded(String conversationSidArg, MessageData messageDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.messageAdded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void messageUpdated(String conversationSidArg, MessageData messageDataArg, String reasonArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.messageUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg, reasonArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void messageDeleted(String conversationSidArg, MessageData messageDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.messageDeleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void participantAdded(String conversationSidArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.participantAdded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void participantUpdated(String conversationSidArg, ParticipantData participantDataArg, String reasonArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.participantUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg, reasonArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void participantDeleted(String conversationSidArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.participantDeleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void typingStarted(String conversationSidArg, ConversationData conversationDataArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.typingStarted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void typingEnded(String conversationSidArg, ConversationData conversationDataArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.typingEnded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void synchronizationChanged(String conversationSidArg, ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.synchronizationChanged", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class FlutterLoggingApiCodec extends StandardMessageCodec {
    public static final FlutterLoggingApiCodec INSTANCE = new FlutterLoggingApiCodec();
    private FlutterLoggingApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterLoggingApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterLoggingApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterLoggingApiCodec.INSTANCE;
    }

    public void logFromHost(String msgArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterLoggingApi.logFromHost", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(msgArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
